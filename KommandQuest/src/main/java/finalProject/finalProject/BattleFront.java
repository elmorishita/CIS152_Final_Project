package finalProject;

import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.Random;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 *
 * @author Elijah Morishita
 */
public class BattleFront extends javax.swing.JFrame {

    // Member
    private KommandQuest driver;

    // Constructor
    public BattleFront(KommandQuest driver) {
        this.driver = driver;
        setSize(632, 435);
        setLocationRelativeTo(null);
        initComponents();
        // Display the army types and army sizes labels
        SetLabels();
        // Add a ComponentListener to detect when the window becomes visible, this way the animations appear during the right thread
        this.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentShown(ComponentEvent e) {
                // Start the animation when the window is shown
                CommenceBattle();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        PlayerOneArmyName = new javax.swing.JLabel();
        SolidersRemainLabelOne = new javax.swing.JLabel();
        ArmySizeLabelOne = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        PlayerTwoArmyName = new javax.swing.JLabel();
        SolidersRemainLabelTwo = new javax.swing.JLabel();
        ArmySizeLabelTwo = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        CoinToss1 = new javax.swing.JLabel();
        CoinToss2 = new javax.swing.JLabel();
        CoinToss3 = new javax.swing.JLabel();
        CoinToss4 = new javax.swing.JLabel();
        CoinToss5 = new javax.swing.JLabel();
        BattleSound1 = new javax.swing.JLabel();
        BattleSound2 = new javax.swing.JLabel();
        BattleSound3 = new javax.swing.JLabel();
        BattleSound4 = new javax.swing.JLabel();
        CoinTossLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PlayerOneArmyName.setText("Player One Army");

        SolidersRemainLabelOne.setText("Soliders Remaining:");

        ArmySizeLabelOne.setText("0000");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SolidersRemainLabelOne, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PlayerOneArmyName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 25, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(ArmySizeLabelOne, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(PlayerOneArmyName)
                .addGap(28, 28, 28)
                .addComponent(SolidersRemainLabelOne)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ArmySizeLabelOne)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        PlayerTwoArmyName.setText("Player Two Army");

        SolidersRemainLabelTwo.setText("Soliders Remaining:");

        ArmySizeLabelTwo.setText("0000");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SolidersRemainLabelTwo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PlayerTwoArmyName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(ArmySizeLabelTwo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(PlayerTwoArmyName)
                .addGap(28, 28, 28)
                .addComponent(SolidersRemainLabelTwo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ArmySizeLabelTwo)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        CoinToss1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CoinToss1.setText("_");

        CoinToss2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CoinToss2.setText(" ");

        CoinToss3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CoinToss3.setText(" ");

        CoinToss4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CoinToss4.setText(" ");

        CoinToss5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CoinToss5.setText(" ");

        BattleSound1.setText(" ");

        BattleSound2.setText(" ");

        BattleSound4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        BattleSound4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        BattleSound4.setText(" ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(BattleSound2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(BattleSound1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(BattleSound3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(69, 69, 69))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(BattleSound4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(CoinToss2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CoinToss4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(13, 13, 13)
                                        .addComponent(CoinToss3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(CoinToss1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(CoinToss5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(40, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(BattleSound1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(BattleSound2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(BattleSound3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BattleSound4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(CoinToss3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CoinToss2)
                    .addComponent(CoinToss4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CoinToss1)
                    .addComponent(CoinToss5))
                .addContainerGap())
        );

        CoinTossLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CoinTossLabel.setText("Coin Toss");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(CoinTossLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(CoinTossLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SetLabels() {
        PlayerOneArmyName.setText(driver.getPlayerSettings().getPlayerOneArmy().getArmyType());
        PlayerTwoArmyName.setText(driver.getPlayerSettings().getPlayerTwoArmy().getArmyType());
        ArmySizeLabelOne.setText(Integer.toString(driver.getPlayerSettings().getPlayerOneArmy().getArmySize()));
        ArmySizeLabelTwo.setText(Integer.toString(driver.getPlayerSettings().getPlayerTwoArmy().getArmySize()));
    }

    private void CommenceBattle() {
        new Thread(() -> { // Run animation in a separate thread (only way to visually see it as Swing's UI updates on a separate thread)
            try {
                CoinTossAnimation();
                Thread.sleep(5000);
                DetermineWhoStrikesFirst();
                Thread.sleep(2000);
                BeginBattleAnimation();
                OngoingBattleAnimation(BattleLogic());
                
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
        }).start();
    }

    private LinkedHashMap BattleLogic() {
        Army playerOneArmy = driver.getPlayerSettings().getPlayerOneArmy();
        Army playerTwoArmy = driver.getPlayerSettings().getPlayerTwoArmy();
        boolean isPlayerOneFirst = driver.getPlayerSettings().getBattleResults().getIsPlayerFirst();
        // Commence actual battle, battle results are returned
        return driver.getPlayerSettings().getBattleResults().BeginBattle(playerOneArmy, playerTwoArmy, isPlayerOneFirst);
    }
    
    private void CoinTossAnimation() {
        new Thread(() -> { // Run animation in a separate thread (only way to visually see it as Swing's UI updates on a separate thread)
            try {
                SwingUtilities.invokeLater(() -> CoinToss1.setText("_"));
                Thread.sleep(1000);
                SwingUtilities.invokeLater(() -> CoinToss1.setText(" "));
                SwingUtilities.invokeLater(() -> CoinToss2.setText("\\"));
                Thread.sleep(1000);
                SwingUtilities.invokeLater(() -> CoinToss2.setText(" "));
                SwingUtilities.invokeLater(() -> CoinToss3.setText("|"));
                Thread.sleep(1000);
                SwingUtilities.invokeLater(() -> CoinToss3.setText(" "));
                SwingUtilities.invokeLater(() -> CoinToss4.setText("/"));
                Thread.sleep(1000);
                SwingUtilities.invokeLater(() -> CoinToss4.setText(" "));
                SwingUtilities.invokeLater(() -> CoinToss5.setText("_"));
                Thread.sleep(1000);
                SwingUtilities.invokeLater(() -> CoinToss5.setText(" "));
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
        }).start();
    }

    private void BeginBattleAnimation() {
        new Thread(() -> { // Run animation in a separate thread (only way to visually see it as Swing's UI updates on a separate thread)
            long startTime = System.currentTimeMillis();
            long duration = 5000; // 5sec
            boolean timeRemains = true;
            while (timeRemains) {
                try {
                    Thread.sleep(1000);
                    SwingUtilities.invokeLater(() -> CoinTossLabel.setText(" "));
                    Thread.sleep(1000);
                    SwingUtilities.invokeLater(() -> BattleSound1.setText("BANG"));
                    Thread.sleep(1000);
                    SwingUtilities.invokeLater(() -> BattleSound2.setText("CLASH"));
                    Thread.sleep(1000);
                    SwingUtilities.invokeLater(() -> BattleSound3.setText("AHHHH"));
                    Thread.sleep(1000);
                    SwingUtilities.invokeLater(() -> BattleSound4.setText("BOOM!"));
                    Thread.sleep(1000);
                    SwingUtilities.invokeLater(() -> BattleSound1.setText(" "));
                    SwingUtilities.invokeLater(() -> BattleSound2.setText(" "));
                    SwingUtilities.invokeLater(() -> BattleSound3.setText(" "));
                    SwingUtilities.invokeLater(() -> BattleSound4.setText(" "));
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
                // stop animation after 5sec
                if (System.currentTimeMillis() - startTime >= duration) {
                    timeRemains = false;
                }
            }
        }).start();
    }

    private void OngoingBattleAnimation(LinkedHashMap<Integer, Integer> remainingSoldiers) {
        new Thread(() -> {
            for (Map.Entry<Integer, Integer> battleStats : remainingSoldiers.entrySet()) {
                try {
                    SwingUtilities.invokeLater(() -> BattleSound1.setText("BANG"));
                    ArmySizeLabelOne.setText(battleStats.getKey().toString());
                    ArmySizeLabelTwo.setText(battleStats.getValue().toString());
                    Thread.sleep(1000);
                    SwingUtilities.invokeLater(() -> BattleSound2.setText("CLASH"));
                    SwingUtilities.invokeLater(() -> BattleSound3.setText("AHHHH"));
                    Thread.sleep(1000);
                    SwingUtilities.invokeLater(() -> BattleSound4.setText("BOOM!"));
                    Thread.sleep(1000);
                    SwingUtilities.invokeLater(() -> BattleSound1.setText(" "));
                    SwingUtilities.invokeLater(() -> BattleSound2.setText(" "));
                    SwingUtilities.invokeLater(() -> BattleSound3.setText(" "));
                    SwingUtilities.invokeLater(() -> BattleSound4.setText(" "));
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
            }
            DisplayFinalResults();
            driver.openPlayAgain(this);
        }).start();
    }
    
    
    private void DisplayFinalResults() {
        if (driver.getPlayerSettings().getBattleResults().getIsTie()) {
            // Tie game
            CoinTossLabel.setText("TIE");
        } else {
            if (driver.getPlayerSettings().getBattleResults().getDidPlayerOneWin()) {
                // Player 1 wins
                CoinTossLabel.setText("Player One WINS");
            } else {
                // Player 2  / Computer wins
                if (driver.getPlayerSettings().getIsOnePlayer()) {
                    CoinTossLabel.setText("The computer WINS");
                } else {
                    CoinTossLabel.setText("Player Two WINS");
                }
            }
        }
    }

    /**
     * DetermineWhoStrikesFirst sets playerOne to true if even random number is
     * drawn, else defaults to false
     */
    private void DetermineWhoStrikesFirst() {
        Battle battle = new Battle();
        Random rand = new Random();
        final int MIN = 1;
        final int MAX = 10;
        int coinToss = rand.nextInt(MAX + 1 - MIN) + MIN;
        // If random number is even then Player Strikes first
        if (coinToss % 2 == 0) {
            battle.setIsPlayerFirst(true);
            driver.getPlayerSettings().setBattleResults(battle);
            CoinTossLabel.setText("Player One gets the honor of first strike.");
        } else {
            driver.getPlayerSettings().setBattleResults(battle);
            if (driver.getPlayerSettings().getIsOnePlayer()) {
                CoinTossLabel.setText("The computer gets the honor of first strike.");
            } else {
                CoinTossLabel.setText("Player Two gets the honor of first strike.");
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ArmySizeLabelOne;
    private javax.swing.JLabel ArmySizeLabelTwo;
    private javax.swing.JLabel BattleSound1;
    private javax.swing.JLabel BattleSound2;
    private javax.swing.JLabel BattleSound3;
    private javax.swing.JLabel BattleSound4;
    private javax.swing.JLabel CoinToss1;
    private javax.swing.JLabel CoinToss2;
    private javax.swing.JLabel CoinToss3;
    private javax.swing.JLabel CoinToss4;
    private javax.swing.JLabel CoinToss5;
    private javax.swing.JLabel CoinTossLabel;
    private javax.swing.JLabel PlayerOneArmyName;
    private javax.swing.JLabel PlayerTwoArmyName;
    private javax.swing.JLabel SolidersRemainLabelOne;
    private javax.swing.JLabel SolidersRemainLabelTwo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables

    // Getters/Setters
}
