package finalProject;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.awt.Robot;
import java.util.Random;

/**
 * The Army Selection Menu, allows the user to select any army and its size, the
 * army's atk and def attributes are displayed as well.
 */
public class ArmySelection extends javax.swing.JFrame {
    // Members
    private KommandQuest driver;
    private ArrayList<Army> AllAvailableArmies;
    private List<String> AllAvailableTypes = Arrays.asList("Humans", "Skeletons", "Aliens", "Zombies", "Orcs", "Goblins", "Jedi", "Sith");
    private Army PlayerOneArmy;
    private Army PlayerTwoArmy;
    private boolean IsOnePlayer;
    // Constructor
    public ArmySelection(KommandQuest driver) {
        this.driver = driver;
        setSize(632, 435);
        setLocationRelativeTo(null);
        initComponents();
        setIsOnePlayer(driver.getPlayerSettings().getIsOnePlayer());
        SetModel();
    }
    /**
     * Note: The initComponents method and java.swing variables declared at the
     * bottom were generated by the NetBeans IDE via the Design mode This method
     * is called from within the constructor to initialize the form. WARNING: Do
     * NOT modify this code. The content of this method is always regenerated by
     * the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ArmySelectionTitle = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        PlayerOnePanel = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        ArmySelectionStatsLabelAtkOne = new javax.swing.JLabel();
        ArmySelectionStatsValueAtkOne = new javax.swing.JLabel();
        ArmySelectionStatsLabelOne = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        ArmySelectionStatsValueDefOne = new javax.swing.JLabel();
        ArmySelectionStatsLabelDefOne = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        ArmySelectionTypeLabelOne = new javax.swing.JLabel();
        ArmySelComboPlayOne = new javax.swing.JComboBox<>();
        jPanel7 = new javax.swing.JPanel();
        ArmySelectionSizeLabelOne = new javax.swing.JLabel();
        ArmySelectionSizeValueOne = new javax.swing.JTextField();
        PlayOneSizeErrorLabel = new javax.swing.JLabel();
        PlayerTwoPanel = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        ArmySelectionSizeValueTwo = new javax.swing.JTextField();
        ArmySelectionSizeLabelTwo = new javax.swing.JLabel();
        PlayTwoSizeErrorLabel = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        ArmySelectionStatsLabelTwo = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        ArmySelectionStatsLabelDefTwo = new javax.swing.JLabel();
        ArmySelectionStatsValueDefTwo = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        ArmySelectionStatsLabelAtkTwo = new javax.swing.JLabel();
        ArmySelectionStatsValueAtkTwo = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        ArmySelectionTypeLabelTwo = new javax.swing.JLabel();
        ArmySelComboPlayTwo = new javax.swing.JComboBox<>();
        jPanel14 = new javax.swing.JPanel();
        SubmitSelectionBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kommand Quest Army Selection");
        setPreferredSize(new java.awt.Dimension(632, 500));

        ArmySelectionTitle.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        ArmySelectionTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ArmySelectionTitle.setText("Army Selection");
        ArmySelectionTitle.setAlignmentY(0.0F);

        PlayerOnePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Player 1"));
        PlayerOnePanel.setPreferredSize(new java.awt.Dimension(167, 255));

        ArmySelectionStatsLabelAtkOne.setText("Atk Average");

        ArmySelectionStatsValueAtkOne.setText("0");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ArmySelectionStatsLabelAtkOne)
                .addGap(18, 18, 18)
                .addComponent(ArmySelectionStatsValueAtkOne)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArmySelectionStatsLabelAtkOne)
                    .addComponent(ArmySelectionStatsValueAtkOne))
                .addContainerGap())
        );

        ArmySelectionStatsLabelOne.setText("Stats:");

        ArmySelectionStatsValueDefOne.setText("0");

        ArmySelectionStatsLabelDefOne.setText("Def Average");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ArmySelectionStatsLabelDefOne)
                .addGap(18, 18, 18)
                .addComponent(ArmySelectionStatsValueDefOne)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArmySelectionStatsLabelDefOne)
                    .addComponent(ArmySelectionStatsValueDefOne))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ArmySelectionStatsLabelOne)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ArmySelectionStatsLabelOne)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        ArmySelectionTypeLabelOne.setText("Type");

        ArmySelComboPlayOne.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Humans", "Skeletons", "Aliens", "Zombies", "Orcs", "Goblins", "Jedi", "Sith" }));
        ArmySelComboPlayOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArmySelComboPlayOneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ArmySelComboPlayOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ArmySelectionTypeLabelOne))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ArmySelectionTypeLabelOne)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ArmySelComboPlayOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        ArmySelectionSizeLabelOne.setText("Size");

        ArmySelectionSizeValueOne.setText("100");
        ArmySelectionSizeValueOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArmySelectionSizeValueOneActionPerformed(evt);
            }
        });
        ArmySelectionSizeValueOne.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ArmySelectionSizeValueOneKeyTyped(evt);
            }
        });

        PlayOneSizeErrorLabel.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ArmySelectionSizeLabelOne)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(PlayOneSizeErrorLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(ArmySelectionSizeValueOne, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArmySelectionSizeValueOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ArmySelectionSizeLabelOne))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PlayOneSizeErrorLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout PlayerOnePanelLayout = new javax.swing.GroupLayout(PlayerOnePanel);
        PlayerOnePanel.setLayout(PlayerOnePanelLayout);
        PlayerOnePanelLayout.setHorizontalGroup(
            PlayerOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PlayerOnePanelLayout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(148, 148, 148))
            .addGroup(PlayerOnePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PlayerOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PlayerOnePanelLayout.setVerticalGroup(
            PlayerOnePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PlayerOnePanelLayout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        PlayerTwoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Player 2"));
        PlayerTwoPanel.setPreferredSize(new java.awt.Dimension(167, 255));

        ArmySelectionSizeValueTwo.setText("100");
        ArmySelectionSizeValueTwo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ArmySelectionSizeValueTwoKeyTyped(evt);
            }
        });

        ArmySelectionSizeLabelTwo.setText("Size");

        PlayTwoSizeErrorLabel.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ArmySelectionSizeLabelTwo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(PlayTwoSizeErrorLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(ArmySelectionSizeValueTwo))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArmySelectionSizeValueTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ArmySelectionSizeLabelTwo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PlayTwoSizeErrorLabel)
                .addContainerGap())
        );

        ArmySelectionStatsLabelTwo.setText("Stats:");

        ArmySelectionStatsLabelDefTwo.setText("Def Average");

        ArmySelectionStatsValueDefTwo.setText("0");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ArmySelectionStatsLabelDefTwo)
                .addGap(18, 18, 18)
                .addComponent(ArmySelectionStatsValueDefTwo)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArmySelectionStatsLabelDefTwo)
                    .addComponent(ArmySelectionStatsValueDefTwo))
                .addContainerGap())
        );

        ArmySelectionStatsLabelAtkTwo.setText("Atk Average");

        ArmySelectionStatsValueAtkTwo.setText("0");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ArmySelectionStatsLabelAtkTwo)
                .addGap(18, 18, 18)
                .addComponent(ArmySelectionStatsValueAtkTwo)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ArmySelectionStatsLabelAtkTwo)
                    .addComponent(ArmySelectionStatsValueAtkTwo))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ArmySelectionStatsLabelTwo))
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ArmySelectionStatsLabelTwo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        ArmySelectionTypeLabelTwo.setText("Type");

        ArmySelComboPlayTwo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Humans", "Skeletons", "Aliens", "Zombies", "Orcs", "Goblins", "Jedi", "Sith" }));
        ArmySelComboPlayTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArmySelComboPlayTwoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ArmySelComboPlayTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ArmySelectionTypeLabelTwo))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ArmySelectionTypeLabelTwo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ArmySelComboPlayTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout PlayerTwoPanelLayout = new javax.swing.GroupLayout(PlayerTwoPanel);
        PlayerTwoPanel.setLayout(PlayerTwoPanelLayout);
        PlayerTwoPanelLayout.setHorizontalGroup(
            PlayerTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlayerTwoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PlayerTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(PlayerTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        PlayerTwoPanelLayout.setVerticalGroup(
            PlayerTwoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PlayerTwoPanelLayout.createSequentialGroup()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(120, Short.MAX_VALUE)
                .addComponent(PlayerOnePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(PlayerTwoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(134, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(PlayerTwoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PlayerOnePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        SubmitSelectionBtn.setText("Submit Selection");
        SubmitSelectionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitSelectionBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(248, 248, 248)
                .addComponent(SubmitSelectionBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SubmitSelectionBtn)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ArmySelectionTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ArmySelectionTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** ArmySelectionSizeValueTwoKeyTyped only allows 4x numeric characters, provides validation if value is blank or zero
    * @param evt
    */
    private void ArmySelectionSizeValueTwoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ArmySelectionSizeValueTwoKeyTyped
        try {
            char charEntered = evt.getKeyChar();
            // Only allow numeric characters, consume all else, throws NumberFormatException if textbox is empty
            if (!(Character.isDigit(charEntered)) || ArmySelectionSizeValueTwo.getText().length() >= 4) { // if there are more than 4 chars?
                evt.consume();
            }
            // Check if user entered anything less than 1 (0, 00, 0000, -1, ect...)
            final int MIN_ARMY_SIZE = 1;
            if (Integer.parseInt(ArmySelectionSizeValueTwo.getText()) < MIN_ARMY_SIZE || ArmySelectionSizeValueTwo.getText().length() < 1) {
                throw new NumberFormatException();
            }
            // Validation passes, enable submit button (gets disabled when there's no size) and remove validation label (also only gets added if user enters something below 0)
            SubmitSelectionBtn.setEnabled(true);
            PlayTwoSizeErrorLabel.setText("");
            // Update newly changed Army selection
            boolean isFirstTime = false;
            UpdateArmySelection(ArmySelComboPlayOne.getSelectedItem().toString(), ArmySelComboPlayTwo.getSelectedItem().toString(), Integer.parseInt(ArmySelectionSizeValueOne.getText()), Integer.parseInt(ArmySelectionSizeValueTwo.getText()), isFirstTime);
            // Display new army stats
            UpdateAttributeDisplay();
        } catch (NumberFormatException ex) {
            // NumberFormatException occurs if user removes all characters from the Army Size text input.
            // Update error label, disable submit button.
            PlayTwoSizeErrorLabel.setText("Size must be > 0");
            SubmitSelectionBtn.setEnabled(false);
            SpaceBarPress();
        }
    }//GEN-LAST:event_ArmySelectionSizeValueTwoKeyTyped
    /** SpaceBarPress simulates a space bar press
     */
    private void SpaceBarPress() {
        // Simulates the press of a space-bar, needed as "key-typed" doesn't register the new char right away.
        // So without it, if a user deletes all size input, the validation error appears, then a user enters valid character
        // but "key-typed" still thinks the bad input was pressed - for the life of me it only realizes good input after a spacebar press.
        try {
            java.awt.Robot robot = new java.awt.Robot();
            robot.keyPress(java.awt.event.KeyEvent.VK_SPACE);
            robot.keyRelease(java.awt.event.KeyEvent.VK_SPACE);
        } catch (Exception robotEx) {
            System.out.println("Failed to simulate key press: " + robotEx.getMessage());
        }
    }
    /** ArmySelComboPlayOneActionPerformed updates the army selection and updates the attribute display
    * @param evt
    */
    private void ArmySelComboPlayOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArmySelComboPlayOneActionPerformed
        if (evt.getActionCommand() == "comboBoxChanged") {
            // Update newly changed Army selection
            boolean isFirstTime = false;
            UpdateArmySelection(ArmySelComboPlayOne.getSelectedItem().toString(), ArmySelComboPlayTwo.getSelectedItem().toString(), Integer.parseInt(ArmySelectionSizeValueOne.getText()), Integer.parseInt(ArmySelectionSizeValueTwo.getText()), isFirstTime);
            // Display new army stats
            UpdateAttributeDisplay();
        }
    }//GEN-LAST:event_ArmySelComboPlayOneActionPerformed
    /** ArmySelComboPlayTwoActionPerformed updates the army selection and updates the attribute display
    * @param evt
    */
    private void ArmySelComboPlayTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArmySelComboPlayTwoActionPerformed
        if (evt.getActionCommand() == "comboBoxChanged") {
            // Update newly changed Army selection
            boolean isFirstTime = false;
            UpdateArmySelection(ArmySelComboPlayOne.getSelectedItem().toString(), ArmySelComboPlayTwo.getSelectedItem().toString(), Integer.parseInt(ArmySelectionSizeValueOne.getText()), Integer.parseInt(ArmySelectionSizeValueTwo.getText()), isFirstTime);
            // Display new army stats
            UpdateAttributeDisplay();
        }
    }//GEN-LAST:event_ArmySelComboPlayTwoActionPerformed
    /** SubmitSelectionBtnActionPerformed submits the form, opens the battlefront window and closes the Army Selection window
    * @param evt
    */
    private void SubmitSelectionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitSelectionBtnActionPerformed
        // Set new Amry settings 
        driver.getPlayerSettings().setIsOnePlayer(getIsOnePlayer());
        driver.getPlayerSettings().setPlayerOneArmy(getPlayerOneArmy());
        driver.getPlayerSettings().setPlayerTwoArmy(getPlayerTwoArmy());
        // Begin Battle
        driver.openBattleFront();
        this.dispose();
    }//GEN-LAST:event_SubmitSelectionBtnActionPerformed
    /** ArmySelectionSizeValueOneKeyTyped only allows 4x numeric characters, provides validation if value is blank or zero
    * @param evt
    */
    private void ArmySelectionSizeValueOneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ArmySelectionSizeValueOneKeyTyped
        try {
            char charEntered = evt.getKeyChar();
            // Only allow numeric characters, consume all else, throws NumberFormatException if textbox is empty
            if (!(Character.isDigit(charEntered)) || ArmySelectionSizeValueOne.getText().length() >= 4) { // if there are more than 4 chars?
                evt.consume();
            }
            // Check if user entered anything less than 1 (0, 00, 0000, -1, ect...)
            final int MIN_ARMY_SIZE = 1;
            if (Integer.parseInt(ArmySelectionSizeValueOne.getText()) < MIN_ARMY_SIZE || ArmySelectionSizeValueOne.getText().length() < 1) {
                throw new NumberFormatException();
            }
            // Validation passes, enable submit button (gets disabled when there's no size) and remove validation label (also only gets added if user enters something below 0)
            SubmitSelectionBtn.setEnabled(true);
            PlayOneSizeErrorLabel.setText("");
            // Update newly changed Army selection
            boolean isFirstTime = false;
            UpdateArmySelection(ArmySelComboPlayOne.getSelectedItem().toString(), ArmySelComboPlayTwo.getSelectedItem().toString(), Integer.parseInt(ArmySelectionSizeValueOne.getText()), Integer.parseInt(ArmySelectionSizeValueTwo.getText()), isFirstTime);
            // Display new army stats
            UpdateAttributeDisplay();
        } catch (NumberFormatException ex) {
            // NumberFormatException occurs if user removes all characters from the Army Size text input.
            // Update error label, disable submit button.
            PlayOneSizeErrorLabel.setText("Size must be > 0");
            SubmitSelectionBtn.setEnabled(false);
            SpaceBarPress();
        }
    }//GEN-LAST:event_ArmySelectionSizeValueOneKeyTyped

    private void ArmySelectionSizeValueOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArmySelectionSizeValueOneActionPerformed
        // NetBeans won't let me delete this method for the life of me
    }//GEN-LAST:event_ArmySelectionSizeValueOneActionPerformed
    
    /** SetModel sets the initial default data
    */
    private void SetModel() {
        // Army types = Human, Skeleton, Alien, Zombies, Orcs, Goblins, Jedi, Sith
        // Create all 8x Types of armies, store in an ArrayList for this menu
        List<String> armyTypes = getAllAvailableTypes();
        ArrayList<Army> newArmies = new ArrayList<Army>();
        final int DEFAULT_ARMY_SIZE = 100;
        for (int i = 0; i < armyTypes.size(); i++) {
            newArmies.add(new Army(armyTypes.get(i), DEFAULT_ARMY_SIZE));
        }
        setAllAvailableArmies(newArmies);
        // Assign current default selection to both players (Humans, 100 for Army size).
        // If only One Player is selected then choose random size for Computer (playTwo)
        int playerTwoSize = DEFAULT_ARMY_SIZE;
        if (getIsOnePlayer()) {
            playerTwoSize = GetRandomArmySize();
            ArmySelectionSizeValueTwo.setText(Integer.toString(playerTwoSize));
            // Disable player 2 selections and update label
            ArmySelComboPlayTwo.setEnabled(false);
            ArmySelectionSizeValueTwo.setEnabled(false);
            PlayerTwoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Computer"));
        }
        boolean isFirstTime = true;
        UpdateArmySelection(ArmySelComboPlayOne.getSelectedItem().toString(), ArmySelComboPlayTwo.getSelectedItem().toString(), DEFAULT_ARMY_SIZE, playerTwoSize, isFirstTime);
        // Display army stats
        UpdateAttributeDisplay();
    }
    /** GetRandomArmySize gets a random int for the army size
    * @return int
    */
    private int GetRandomArmySize() {
        Random rand = new Random();
        final int MIN = 1;
        final int MAX = 4999;
        int randomInt = rand.nextInt(MAX + 1 - MIN) + MIN;
        return randomInt;
    }
    /** GetRandomArmyTypeIndex gets a random int for the index regarding army type
    * @return int
    */
    private int GetRandomArmyTypeIndex() {
        Random rand = new Random();
        final int MIN = 0;
        final int MAX = 7;
        int randomInt = rand.nextInt(MAX + 1 - MIN) + MIN;
        return randomInt;
    }
    /** UpdateArmySelection sets the armies for both users, or user and computer, along with their attributes
    */
    private void UpdateArmySelection(String PlayOneArmyType, String PlayTwoArmyType, int PlayerOneArmySize, int PlayerTwoArmySize, boolean isFirstTime) {
        // AllAvailableTypes & AllAvailableArmies share the same index, so first get the index based on the player selection (Humans are default)
        List<String> armyTypes = getAllAvailableTypes();
        int playOneArmyTypeIndex = armyTypes.indexOf(PlayOneArmyType);
        int playTwoArmyTypeIndex = armyTypes.indexOf(PlayTwoArmyType);
        // Assign a random Army Type if only One Player
        if (getIsOnePlayer() && isFirstTime) {
            playTwoArmyTypeIndex = GetRandomArmyTypeIndex();
            ArmySelComboPlayTwo.setSelectedIndex(playTwoArmyTypeIndex);
        }
        // Get the armys based on that index
        ArrayList<Army> AllArmies = getAllAvailableArmies();
        Army playerOneArmy = AllArmies.get(playOneArmyTypeIndex);
        Army playerTwoArmy = AllArmies.get(playTwoArmyTypeIndex);
        if (PlayerOneArmySize != playerOneArmy.getArmySize()) {
            // Set the army size (default is 100)
            playerOneArmy.setArmySize(PlayerOneArmySize);
            // Update the attributes (the difference in army size changes the average attribute info)
            playerOneArmy.setAttributes(PlayerOneArmySize, armyTypes.get(playOneArmyTypeIndex));
        }
        if (PlayerTwoArmySize != playerTwoArmy.getArmySize()) {
            // Set the army size (default is 100 or random between 1 - 9999 if only one player)
            playerTwoArmy.setArmySize(PlayerTwoArmySize);
            // Update the attributes (the difference in army size changes the average attribute info)
            playerTwoArmy.setAttributes(PlayerTwoArmySize, armyTypes.get(playTwoArmyTypeIndex));
        }
        // Set the player 1 & 2 assigned armys
        setPlayerOneArmy(playerOneArmy);
        setPlayerTwoArmy(playerTwoArmy);
    }
    /** UpdateAttributeDisplay updates the attributes displayed
    */
    private void UpdateAttributeDisplay() {
        Army PlayerOne = getPlayerOneArmy();
        Army PlayerTwo = getPlayerTwoArmy();
        ArmySelectionStatsValueAtkOne.setText(PlayerOne.getAverageAtk(PlayerOne.getArmy()));
        ArmySelectionStatsValueAtkTwo.setText(PlayerTwo.getAverageAtk(PlayerTwo.getArmy()));
        ArmySelectionStatsValueDefOne.setText(PlayerOne.getAverageDef(PlayerOne.getArmy()));
        ArmySelectionStatsValueDefTwo.setText(PlayerTwo.getAverageDef(PlayerTwo.getArmy()));
    }
    // Getters & Setters
    public boolean getIsOnePlayer() {
        return IsOnePlayer;
    }
    public void setIsOnePlayer(boolean IsOnePlayer) {
        this.IsOnePlayer = IsOnePlayer;
    }
    public ArrayList<Army> getAllAvailableArmies() {
        return AllAvailableArmies;
    }
    public void setAllAvailableArmies(ArrayList<Army> AllAvailableArmies) {
        this.AllAvailableArmies = AllAvailableArmies;
    }
    public Army getPlayerOneArmy() {
        return PlayerOneArmy;
    }
    public void setPlayerOneArmy(Army PlayerOneArmy) {
        this.PlayerOneArmy = PlayerOneArmy;
    }
    public Army getPlayerTwoArmy() {
        return PlayerTwoArmy;
    }
    public void setPlayerTwoArmy(Army PlayerTwoArmy) {
        this.PlayerTwoArmy = PlayerTwoArmy;
    }
    public List<String> getAllAvailableTypes() {
        return AllAvailableTypes;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ArmySelComboPlayOne;
    private javax.swing.JComboBox<String> ArmySelComboPlayTwo;
    private javax.swing.JLabel ArmySelectionSizeLabelOne;
    private javax.swing.JLabel ArmySelectionSizeLabelTwo;
    private javax.swing.JTextField ArmySelectionSizeValueOne;
    private javax.swing.JTextField ArmySelectionSizeValueTwo;
    private javax.swing.JLabel ArmySelectionStatsLabelAtkOne;
    private javax.swing.JLabel ArmySelectionStatsLabelAtkTwo;
    private javax.swing.JLabel ArmySelectionStatsLabelDefOne;
    private javax.swing.JLabel ArmySelectionStatsLabelDefTwo;
    private javax.swing.JLabel ArmySelectionStatsLabelOne;
    private javax.swing.JLabel ArmySelectionStatsLabelTwo;
    private javax.swing.JLabel ArmySelectionStatsValueAtkOne;
    private javax.swing.JLabel ArmySelectionStatsValueAtkTwo;
    private javax.swing.JLabel ArmySelectionStatsValueDefOne;
    private javax.swing.JLabel ArmySelectionStatsValueDefTwo;
    private javax.swing.JLabel ArmySelectionTitle;
    private javax.swing.JLabel ArmySelectionTypeLabelOne;
    private javax.swing.JLabel ArmySelectionTypeLabelTwo;
    private javax.swing.JLabel PlayOneSizeErrorLabel;
    private javax.swing.JLabel PlayTwoSizeErrorLabel;
    private javax.swing.JPanel PlayerOnePanel;
    private javax.swing.JPanel PlayerTwoPanel;
    private javax.swing.JButton SubmitSelectionBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    // End of variables declaration//GEN-END:variables
}
